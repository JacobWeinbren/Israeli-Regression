---

---

<div class="chart-container relative min-w-[400px] w-full h-[30rem] bg-white">
	<canvas id="predictionChart"></canvas>
</div>

<script>
	import Chart from "chart.js/auto";

	const form = document.getElementById("predictionForm") as HTMLFormElement;
	const canvas = document.getElementById(
		"predictionChart"
	) as HTMLCanvasElement;
	const ctx = canvas.getContext("2d");
	if (!ctx) {
		console.error("Failed to get canvas context");
		throw new Error("Failed to get canvas context");
	}

	let predictionChart: Chart | null = null;

	const partyNames: { [key: string]: string } = {
		1: "Likud",
		2: "Yesh Atid",
		3: "National Unity",
		4: "Hatzionut Hadatit",
		5: "Shas",
		6: "Yahadut HaTorah",
		7: "Yisrael Beitenu",
		8: "HaAvoda",
		9: "Meretz",
		10: "HaBayit HaYehudi",
		11: "Hadash-Ta’al",
		12: "Ra’am",
		13: "Balad",
	};

	const partyColors: { [key: number]: string } = {
		1: "#1f5aa5",
		2: "#ed780c",
		3: "#ed780c",
		4: "#1f5aa5",
		5: "black",
		6: "black",
		7: "#1f5aa5",
		8: "#EE1C25",
		9: "#EE1C25",
		10: "#1f5aa5",
		11: "#007A3D",
		12: "#007A3D",
		13: "#007A3D",
	};

	function updateChart() {
		const formData = new FormData(form);
		const data = {
			age_group: Number(formData.get("ageGroup")),
			v144: Number(formData.get("religiosity")),
			v712_groups: Number(formData.get("deprivationScale")),
			recode_v131: Number(formData.get("ethnicity")),
			sector: Number(formData.get("sector")),
			sex: Number(formData.get("sex")),
			educ_group: Number(formData.get("educationLevel")),
			v111: Number(formData.get("politicalOrientation")),
		};

		fetch("https://israeli-regression-shy-waterfall-1783.fly.dev/predict", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify(data),
		})
			.then((response) => response.json())
			.then((response) => {
				const probabilities = Object.keys(response).map((key) => ({
					party: partyNames[parseInt(key)],
					probability: parseFloat((response[key] * 100).toFixed(1)),
					color: partyColors[parseInt(key)] || "#FFFFFF",
				}));

				if (predictionChart) {
					predictionChart.data.labels = probabilities.map(
						(p) => p.party
					);
					predictionChart.data.datasets[0].data = probabilities.map(
						(p) => p.probability
					);
					predictionChart.data.datasets[0].backgroundColor =
						probabilities.map((p) => p.color);
					predictionChart.update();
				} else {
					if (!ctx) {
						console.error("Failed to get canvas context");
						return;
					}

					predictionChart = new Chart(ctx, {
						type: "bar",
						data: {
							labels: probabilities.map((p) => p.party),
							datasets: [
								{
									label: "Probability",
									data: probabilities.map(
										(p) => p.probability
									),
									backgroundColor: probabilities.map(
										(p) => p.color
									),
									borderRadius: 5,
									borderSkipped: false,
									barThickness: 15,
								},
							],
						},
						options: {
							responsive: true, // Ensure the chart is responsive
							maintainAspectRatio: false,
							indexAxis: "y",
							scales: {
								x: {
									beginAtZero: true,
									max: 100,
									title: {
										display: true,
										text: "Percentage",
										color: "black",
										font: {
											family: "system-ui",
											size: 12,
										},
									},
								},
								y: {
									ticks: {
										font: {
											family: "system-ui",
											size: 12,
											weight: "normal",
										},
									},
								},
							},
							plugins: {
								legend: {
									display: false,
								},
								title: {
									display: true,
									text: "Probability of Voting for Party",
									color: "black",
									font: {
										family: "system-ui",
										size: 15,
										weight: "bold",
									},
								},
							},
						},
					});
				}
			})
			.catch((error) => console.error("Error:", error));
	}

	// Add event listeners to all inputs for changes
	const inputs = form.querySelectorAll("select");
	inputs.forEach((input) => {
		input.addEventListener("change", updateChart);
	});

	// Initial chart load
	window.addEventListener("load", updateChart);
</script>
