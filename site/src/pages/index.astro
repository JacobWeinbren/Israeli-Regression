---
import Form from "../components/Form.astro";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Prediction Chart</title>
	</head>
	<body>
		<div class="gap-4 w-1/2 p-4">
			<Form />
			<canvas id="predictionChart"></canvas>
		</div>

		<script>
			import Chart from "chart.js/auto";

			type FormDataMap = { [key: string]: number };

			const form = document.getElementById(
				"predictionForm"
			) as HTMLFormElement;
			const canvas = document.getElementById(
				"predictionChart"
			) as HTMLCanvasElement;
			const ctx = canvas.getContext("2d");
			if (!ctx) {
				console.error("Failed to get canvas context");
				throw new Error("Failed to get canvas context");
			}

			let predictionChart: Chart | null = null;

			function updateChart() {
				const formData = new FormData(form);
				const data = {
					age_group: Number(formData.get("ageGroup")),
					v144: Number(formData.get("religiosity")),
					v712: Number(formData.get("deprivationScale")),
					recode_v131: Number(formData.get("ethnicity")),
					sector: Number(formData.get("sector")),
					sex: Number(formData.get("sex")),
					educ: Number(formData.get("educationLevel")),
				};

				console.log(data);

				fetch("https://israeli-regression.onrender.com/predict", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify(data),
				})
					.then((response) => response.json())
					.then((response: number[][]) => {
						const data = response[0];

						console.log(data);

						const probabilities = data.map((prob) =>
							parseFloat((prob * 100).toFixed(1))
						);

						if (predictionChart) {
							predictionChart.data.datasets[0].data =
								probabilities;
							predictionChart.update();
						} else {
							if (!ctx) {
								console.error("Failed to get canvas context");
								throw new Error("Failed to get canvas context");
							} else {
								predictionChart = new Chart(ctx, {
									type: "bar",
									data: {
										labels: [
											"Likud",
											"Yesh Atid",
											"National Unity",
											"Hatzionut Hadatit",
											"Shas",
											"Yahadut HaTorah",
											"Yisrael Beitenu",
											"HaAvoda",
											"Meretz",
											"HaBayit HaYehudi",
											"Hadash-Ta’al",
											"Ra’am",
											"Balad",
										],
										datasets: [
											{
												label: "Probability",
												data: probabilities,
												backgroundColor: [
													"#1f5aa5",
													"#ed780c",
													"#ed780c",
													"#1f5aa5",
													"black",
													"black",
													"#1f5aa5",
													"#EE1C25",
													"#EE1C25",
													"#1f5aa5",
													"#007A3D",
													"#007A3D",
													"#007A3D",
												],
												borderColor: [
													"#1f5aa5",
													"#ed780c",
													"#ed780c",
													"#1f5aa5",
													"black",
													"black",
													"#1f5aa5",
													"#EE1C25",
													"#EE1C25",
													"#1f5aa5",
													"#007A3D",
													"#007A3D",
													"#007A3D",
												],
												borderWidth: 2,
												borderRadius: 5,
												borderSkipped: false,
											},
										],
									},
									options: {
										indexAxis: "y",
										scales: {
											x: {
												beginAtZero: true,
												max: 100,
											},
										},
										plugins: {
											legend: {
												display: false,
											},
											title: {
												display: true,
												text: "Probability of Voting for Party",
											},
										},
										font: {
											family: "Arial, sans-serif", 
											size: 14, 
											weight: "bold", 
										},
									},
								});
							}
						}
					})
					.catch((error) => console.error("Error:", error));
			}

			// Add event listeners to all inputs for changes
			const inputs = form.querySelectorAll("select");
			inputs.forEach((input) => {
				input.addEventListener("change", updateChart);
			});

			// Initial chart load
			window.addEventListener("load", updateChart);
		</script>
	</body>
</html>
